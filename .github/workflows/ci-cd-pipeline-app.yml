# Github actions for CI and CD workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Ionic Angular and Python application
env:
  EB_PACKAGE_S3_BUCKET_NAME: "ionic-python-bucket"
  EB_APPLICATION_NAME: "ionic-python-ebs"
  EB_ENVIRONMENT_NAME: "Ionicpythonebs-env"
  DEPLOY_PACKAGE_NAME: "flask-app-${{ github.sha }}.zip"
  AWS_REGION_NAME:     "us-east-1"
  AWS_ACCES_KEY:       "AKIA6F37L2P7JXZ3U5WC"
  AWS_SECRET_KEY:      "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"
  #EB_WEB_APPLICATION_NAME: "ionic-angular-ebs"
  #EB_WEB_ENVIRONMENT_NAME: "Ionicangularebs-env"


on:
  push:
    branches: [ feature/** ]
  pull_request:
    types:
      - assigned
      - unassigned
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
    branches: [ develop, release, main ]

jobs:
  build-backend-python:
    name: CI-Backend
    runs-on: ubuntu-latest
    steps:
    - name: Repository checkout
      uses: actions/checkout@v1

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r flaskr/requirements.txt
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Unit test python
      run: python run.py & pytest

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCES_KEY }}
        aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
        aws-region: ${{env.AWS_REGION_NAME}}

    - name: Unit test python
      run: python run.py & pytest

  deploy-backend-python:
    name: CD-AWS
    needs: [ build-backend-python ]
    if: github.ref == 'refs/heads/feature/integracion-continua-code-deploy'
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCES_KEY }}
        aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
        aws-region: ${{env.AWS_REGION_NAME}}

    - name: Create CodeDeploy Deployment
      id: deploy
      run: |
        # Assuming the Deployment Group is already setup
        aws deploy create-deployment \
        --application-name application-name \
        --deployment-group-name AppDeploymentGroupName \
        --deployment-config-name CodeDeployDefault.OneAtATime \
        --github-location repository=${{ github.repository }},commitId=${{ github.sha }}

  build1:
    name: CI-Frontend
    needs: [ deploy-backend-python ]
    runs-on: ubuntu-latest
    steps:
    - name: Repository checkout
      uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v2

    - name: npm install
      run: |
        # move to tutorial-canciones folder
        cd front-end/tutorial-canciones
        # install dependences
        npm install
        # angular install
        npm install -g @angular/cli

    - name: Build
      run: |
        # move to tutorial-canciones folder
        cd front-end/tutorial-canciones
        npm run build

    #- name: Unit test angular
     # run: |
        # move to tutorial-canciones folder
      #  cd front-end/tutorial-canciones
       # ng test

    - name: Generate deployment package
      run: zip -r deploy.zip . -x '*.git*'

    - name: Beanstalk Deploy
      uses: einaregilsson/beanstalk-deploy@v18
      with:
        aws_access_key: ${{ env.AWS_ACCES_KEY }}
        aws_secret_key: ${{ env.AWS_SECRET_KEY }}
        region: ${{env.AWS_REGION_NAME}}
        application_name: ${{ env.EB_WEB_APPLICATION_NAME }}
        environment_name: ${{ env.EB_WEB_ENVIRONMENT_NAME }}
        version_label: 1