# Github actions for CI and CD workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Ionic Angular and Python application
env:
  EB_PACKAGE_S3_BUCKET_NAME: "ionic-python-bucket"
  EB_APPLICATION_NAME: "ionic-python-ebs"
  EB_ENVIRONMENT_NAME: "Ionicpythonebs-env"
  DEPLOY_PACKAGE_NAME: "flask-app-${{ github.sha }}.zip"
  AWS_REGION_NAME:     "us-east-1"
  AWS_ACCES_KEY:       "AKIA6F37L2P7JXZ3U5WC"
  AWS_SECRET_KEY:      "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"

on:
  push:
    branches: [ feature/** ]
  pull_request:
    types:
      - assigned
      - unassigned
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
    branches: [ develop, release, main ]

jobs:
  build-backend-python:
    name: CI-Backend
    runs-on: ubuntu-latest
    steps:
    - name: Repository checkout
      uses: actions/checkout@v2
    - run: |
        git fetch --prune --unshallow

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r flaskr/requirements.txt
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Unit test python
      run: |
        pytest

    - name: Create ZIP deployment package
      run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCES_KEY }}
        aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
        aws-region: ${{env.AWS_REGION_NAME}}

    - name: Copy Deployment Package to S3 bucket
      run: aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME }}/

    - name: Print nice message on completion of CI Pipeline
      run: echo "CI Pipeline part finished successfully"

  deploy-backend-python:
    name: CD-AWS
    needs: [ build-backend-python ]
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCES_KEY }}
        aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
        aws-region: ${{env.AWS_REGION_NAME}}

    - name: Create new ElasticBeanstalk Application Version
      run: |
        aws elasticbeanstalk create-application-version \
        --application-name ${{ env.EB_APPLICATION_NAME }} \
        --source-bundle S3Bucket="${{ env.EB_PACKAGE_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
        --version-label "Ver-${{ github.sha }}" \
        --description "CommitSHA-${{ github.sha }}"

    - name: Deploy new Application Version
      run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}"

    - name: Mensaje
      if: ${{ success() }}
      env:
        MENSAJE_EXITO: DESPLIEGUE PRODUCCIÃ“N
      run: echo "::set-output name=respuesta::${MENSAJE_EXITO}"

  build1:
    name: CI-Frontend
    needs: [ deploy-backend-python ]
    runs-on: ubuntu-latest
    steps:
    #- name: Repository checkout
    #  uses: actions/checkout@v2
    # - run: |
    #    git fetch --prune --unshallow

    - name: Setup node
      uses: actions/setup-node@v2

    - name: npm install
      run: |
        # move to tutorial-canciones folder
        cd front-end/tutorial-canciones
        # install dependences
        npm install
        # angular install
        npm install -g @angular/cli

    - name: Build
      run: |
        # move to tutorial-canciones folder
        cd front-end/tutorial-canciones
        npm run build

    - name: Unit test angular
      run: |
        # move to tutorial-canciones folder
        cd front-end/tutorial-canciones
        ng test

    - name: Deploy to Heroku
      env:
        herokuApiToken: ${{ '909c1594-900d-4858-b62e-297caf026586' }}
        herokuAppName: ${{ 'powerful-reef-77657' }}
      if: github.ref == 'refs/heads/develop' && job.status == 'success'
      run: |
        git remote add heroku https://heroku:$herokuApiToken@git.heroku.com/$herokuAppName.git
        git push heroku HEAD:develop -f
